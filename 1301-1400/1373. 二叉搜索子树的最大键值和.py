# -*- coding: utf-8 -*-
import collections


# Áªô‰Ω†‰∏ÄÊ£µ‰ª• root ‰∏∫Ê†πÁöÑ ‰∫åÂèâÊ†ë ÔºåËØ∑‰Ω†ËøîÂõû ‰ªªÊÑè ‰∫åÂèâÊêúÁ¥¢Â≠êÊ†ëÁöÑÊúÄÂ§ßÈîÆÂÄºÂíå„ÄÇ
#
#  ‰∫åÂèâÊêúÁ¥¢Ê†ëÁöÑÂÆö‰πâÂ¶Ç‰∏ãÔºö
#
#
#  ‰ªªÊÑèËäÇÁÇπÁöÑÂ∑¶Â≠êÊ†ë‰∏≠ÁöÑÈîÆÂÄºÈÉΩ Â∞è‰∫é Ê≠§ËäÇÁÇπÁöÑÈîÆÂÄº„ÄÇ
#  ‰ªªÊÑèËäÇÁÇπÁöÑÂè≥Â≠êÊ†ë‰∏≠ÁöÑÈîÆÂÄºÈÉΩ Â§ß‰∫é Ê≠§ËäÇÁÇπÁöÑÈîÆÂÄº„ÄÇ
#  ‰ªªÊÑèËäÇÁÇπÁöÑÂ∑¶Â≠êÊ†ëÂíåÂè≥Â≠êÊ†ëÈÉΩÊòØ‰∫åÂèâÊêúÁ¥¢Ê†ë„ÄÇ
#
#
#
#
#  Á§∫‰æã 1Ôºö
#
#
#
#
# ËæìÂÖ•Ôºöroot = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
# ËæìÂá∫Ôºö20
# Ëß£ÈáäÔºöÈîÆÂÄº‰∏∫ 3 ÁöÑÂ≠êÊ†ëÊòØÂíåÊúÄÂ§ßÁöÑ‰∫åÂèâÊêúÁ¥¢Ê†ë„ÄÇ
#
#
#  Á§∫‰æã 2Ôºö
#
#
#
#
# ËæìÂÖ•Ôºöroot = [4,3,null,1,2]
# ËæìÂá∫Ôºö2
# Ëß£ÈáäÔºöÈîÆÂÄº‰∏∫ 2 ÁöÑÂçïËäÇÁÇπÂ≠êÊ†ëÊòØÂíåÊúÄÂ§ßÁöÑ‰∫åÂèâÊêúÁ¥¢Ê†ë„ÄÇ
#
#
#  Á§∫‰æã 3Ôºö
#
#
# ËæìÂÖ•Ôºöroot = [-4,-2,-5]
# ËæìÂá∫Ôºö0
# Ëß£ÈáäÔºöÊâÄÊúâËäÇÁÇπÈîÆÂÄºÈÉΩ‰∏∫Ë¥üÊï∞ÔºåÂíåÊúÄÂ§ßÁöÑ‰∫åÂèâÊêúÁ¥¢Ê†ë‰∏∫Á©∫„ÄÇ
#
#
#  Á§∫‰æã 4Ôºö
#
#
# ËæìÂÖ•Ôºöroot = [2,1,3]
# ËæìÂá∫Ôºö6
#
#
#  Á§∫‰æã 5Ôºö
#
#
# ËæìÂÖ•Ôºöroot = [5,4,8,3,null,6,3]
# ËæìÂá∫Ôºö7
#
#
#
#
#  ÊèêÁ§∫Ôºö
#
#
#  ÊØèÊ£µÊ†ëÊúâ 1 Âà∞ 40000 ‰∏™ËäÇÁÇπ„ÄÇ
#  ÊØè‰∏™ËäÇÁÇπÁöÑÈîÆÂÄºÂú® [-4 * 10^4 , 4 * 10^4] ‰πãÈó¥„ÄÇ
#
#  Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊêúÁ¥¢Ê†ë Âä®ÊÄÅËßÑÂàí ‰∫åÂèâÊ†ë
#  üëç 50 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def maxSumBST(self, root: TreeNode) -> int:
        m = collections.defaultdict(lambda: float('-inf'))
        mi = collections.defaultdict(lambda: float('inf'))
        s = collections.defaultdict(lambda: float('-inf'))

        def dfs(node):
            if not node:
                return 0, float('-inf'), float('inf')
            sl, ml, mil = dfs(node.left)
            sr, mr, mir = dfs(node.right)
            m[node] = max(node.val, ml, mr)
            mi[node] = min(node.val, mil, mir)
            s[node] = node.val + sl + sr
            return s[node], m[node], mi[node]

        dfs(root)
        self.ans = 0

        def judge(node):
            if not node:
                return True
            l, r = node.left, node.right
            a = judge(l)
            b = judge(r)
            if a and b:
                if l:
                    if node.val <= m[l]:  # Â§ß‰∫éÂ∑¶Â≠êÊ†ëÁöÑÊúÄÂ§ßÂÄº
                        return False
                if r:
                    if node.val >= mi[r]:  # Â∞è‰∫éÂè≥Â≠êÊ†ëÁöÑÊúÄÂ∞èÂÄº
                        return False
                self.ans = max(self.ans, s[node])
                return True
            return False

        judge(root)
        return self.ans



from leetcode.trick.treenode.T import stringToTreeNode

a = stringToTreeNode(' [1,null,10,-5,20]')
Solution().maxSumBST(a)
