# -*- coding: utf-8 -*-
import collections
import itertools
from typing import List


# ÂèàÂà∞‰∫Ü‰∏ÄÂπ¥‰∏ÄÂ∫¶ÁöÑÊò•Ê∏∏Êó∂Èó¥ÔºåÂ∞èÂê¥ËÆ°ÂàíÂéªÊ∏∏‰πêÂú∫Ê∏∏Áé© 1 Â§©ÔºåÊ∏∏‰πêÂú∫ÊÄªÂÖ±Êúâ N ‰∏™Ê∏∏‰πêÈ°πÁõÆÔºåÁºñÂè∑‰ªé 0 Âà∞ N-1„ÄÇÂ∞èÂê¥ÁªôÊØè‰∏™Ê∏∏‰πêÈ°πÁõÆÂÆö‰πâ‰∫Ü‰∏Ä‰∏™ÈùûË¥üÊï¥Êï∞ÂÄº val
# ue[i] Ë°®Á§∫Ëá™Â∑±ÁöÑÂñúÁà±ÂÄº„ÄÇ‰∏§‰∏™Ê∏∏‰πêÈ°πÁõÆ‰πãÈó¥‰ºöÊúâÂèåÂêëË∑ØÂæÑÁõ∏ËøûÔºåÊï¥‰∏™Ê∏∏‰πêÂú∫ÊÄªÂÖ±Êúâ M Êù°ÂèåÂêëË∑ØÂæÑÔºå‰øùÂ≠òÂú®‰∫åÁª¥Êï∞ÁªÑ edges‰∏≠„ÄÇ Â∞èÂê¥ËÆ°ÂàíÈÄâÊã©‰∏Ä‰∏™Ê∏∏‰πêÈ°πÁõÆ A
# ‰Ωú‰∏∫Ëøô‰∏ÄÂ§©Ê∏∏Áé©ÁöÑÈáçÁÇπÈ°πÁõÆ„ÄÇ‰∏äÂçàÂ∞èÂê¥ÂáÜÂ§áÊ∏∏Áé©ÈáçÁÇπÈ°πÁõÆ A ‰ª•Âèä‰∏éÈ°πÁõÆ A Áõ∏ÈÇªÁöÑ‰∏§‰∏™È°πÁõÆ B„ÄÅC ÔºàÈ°πÁõÆA„ÄÅB‰∏éCË¶ÅÊ±ÇÊòØ‰∏çÂêåÁöÑÈ°πÁõÆÔºå‰∏îÈ°πÁõÆB‰∏éÈ°πÁõÆCË¶ÅÊ±ÇÁõ∏ÈÇªÔºâÔºåÂπ∂
# ËøîÂõû A ÔºåÂç≥Â≠òÂú®‰∏ÄÊù° A-B-C-A ÁöÑË∑ØÂæÑ„ÄÇ ‰∏ãÂçàÔºåÂ∞èÂê¥ÂÜ≥ÂÆöÂÜçÊ∏∏Áé©ÈáçÁÇπÈ°πÁõÆ A‰ª•Âèä‰∏éAÁõ∏ÈÇªÁöÑ‰∏§‰∏™È°πÁõÆ B'„ÄÅC'ÔºåÔºàÈ°πÁõÆA„ÄÅB'‰∏éC'Ë¶ÅÊ±ÇÊòØ‰∏çÂêåÁöÑÈ°πÁõÆÔºå‰∏îÈ°π
# ÁõÆB'‰∏éÈ°πÁõÆC'Ë¶ÅÊ±ÇÁõ∏ÈÇªÔºâÔºåÂπ∂ËøîÂõû A ÔºåÂç≥Â≠òÂú®‰∏ÄÊù° A-B'-C'-A ÁöÑË∑ØÂæÑ„ÄÇ‰∏ãÂçàÊ∏∏Áé©È°πÁõÆ B'„ÄÅC' ÂèØ‰∏é‰∏äÂçàÊ∏∏Áé©È°πÁõÆB„ÄÅCÂ≠òÂú®ÈáçÂ§çÈ°πÁõÆ„ÄÇ Â∞èÂê¥Â∏åÊúõÊèêÂâçÂÆâ
# ÊéíÂ•ΩÊ∏∏Áé©Ë∑ØÂæÑÔºå‰ΩøÂæóÂñúÁà±ÂÄº‰πãÂíåÊúÄÂ§ß„ÄÇËØ∑‰Ω†ËøîÂõûÊª°Ë∂≥Ê∏∏Áé©Ë∑ØÂæÑÈÄâÂèñÊù°‰ª∂ÁöÑÊúÄÂ§ßÂñúÁà±ÂÄº‰πãÂíåÔºåÂ¶ÇÊûúÊ≤°ÊúâËøôÊ†∑ÁöÑË∑ØÂæÑÔºåËøîÂõû 0„ÄÇ Ê≥®ÊÑèÔºö‰∏ÄÂ§©‰∏≠ÈáçÂ§çÊ∏∏Áé©Âêå‰∏Ä‰∏™È°πÁõÆÂπ∂‰∏çËÉΩÈáçÂ§çÂ¢ûÂä†ÂñúÁà±
# ÂÄº‰∫Ü„ÄÇ‰æãÂ¶ÇÔºö‰∏ä‰∏ãÂçàÊ∏∏Áé©Ë∑ØÂæÑÂàÜÂà´ÊòØ A-B-C-A‰∏éA-C-D-A ÈÇ£‰πàÂè™ËÉΩËé∑Âæó value[A] + value[B] + value[C] + value[D
# ] ÁöÑÊÄªÂíå„ÄÇ
#
#  Á§∫‰æã 1Ôºö
#
#
#  ËæìÂÖ•Ôºöedges = [[0,1],[1,2],[0,2]], value = [1,2,3]
#
#  ËæìÂá∫Ôºö6
#
#  Ëß£ÈáäÔºöÂñúÁà±ÂÄº‰πãÂíåÊúÄÈ´òÁöÑÊñπÊ°à‰πã‰∏ÄÊòØ 0->1->2->0 ‰∏é 0->2->1->0 „ÄÇÈáçÂ§çÊ∏∏Áé©Âêå‰∏ÄÁÇπ‰∏çÈáçÂ§çËÆ°ÂÖ•ÂñúÁà±ÂÄºÔºåËøîÂõû1+2+3=6
#
#
#  Á§∫‰æã 2Ôºö
#
#
#  ËæìÂÖ•Ôºöedges = [[0,2],[2,1]], value = [1,2,5]
#
#  ËæìÂá∫Ôºö0
#
#  Ëß£ÈáäÔºöÊó†Êª°Ë∂≥Ë¶ÅÊ±ÇÁöÑÊ∏∏Áé©Ë∑ØÂæÑÔºåËøîÂõû 0
#
#
#  Á§∫‰æã 3Ôºö
#
#
#  ËæìÂÖ•Ôºöedges = [[0,1],[0,2],[0,3],[0,4],[0,5],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]
# ], value = [7,8,6,8,9,7]
#
#  ËæìÂá∫Ôºö39
#
#  Ëß£ÈáäÔºöÂñúÁà±ÂÄº‰πãÂíåÊúÄÈ´òÁöÑÊñπÊ°à‰πã‰∏ÄÊòØ 3->0->1->3 ‰∏é 3->4->5->3 „ÄÇÂñúÁà±ÂÄºÊúÄÈ´ò‰∏∫ 7+8+8+9+7=39
#
#
#  ÈôêÂà∂Ôºö
#
#
#  3 <= value.length <= 10000
#  1 <= edges.length <= 10000
#  0 <= edges[i][0],edges[i][1] < value.length
#  0 <= value[i] <= 10000
#  edges‰∏≠Ê≤°ÊúâÈáçÂ§çÁöÑËæπ
#  edges[i][0] != edges[i][1]
#
#  Related Topics Âõæ Âá†‰Ωï Êï∞Â≠¶
#  üëç 17 üëé 0


# ËøôÈáåÊúâ‰∏™ÂæàÊúâÊÑèÊÄùÁöÑÂú∞ÊñπÔºåÂ∞±ÊòØÂÅáÂ¶ÇÊüê‰∏™ÁÇπÊúâÂ§ö‰∏™ÊúÄÂ§ß‰∏âËßíÂΩ¢Ôºå‰ΩÜÈ¢òËß£Âè™ËÄÉËôë‰∫Ü‰∏Ä‰∏™„ÄÇÂÅáËÆæÊúâË∂ÖËøá‰∏§‰∏™‰∏çÂÖ±Á∫øÁöÑÊúÄÂ§ß‰∏âËßíÂΩ¢ÔºåÈÇ£‰πàÈöèÊú∫ÈÄâ‰∏§‰∏™ÁªÑÂêàÁõ¥Êé•ÂèØ‰ª•‰Ωú‰∏∫Á≠îÊ°à„ÄÇÂÅáËÆæÂè™Êúâ‰∏§‰∏™ÊúÄÂ§ß‰∏âËßíÂΩ¢‰∏îÂÖ±Á∫øÔºåÊØîÂ¶Ç acbÂíåacd‰∏∫‰∏§‰∏™Áõ∏ÂêåÁöÑÊúÄÂ§ß‰∏âËßíÂΩ¢ÔºåÁî±‰∫éÂÖ±Á∫øacÔºåÊâÄ‰ª•b=dÔºåÊàë‰ª¨Âè™ËÄÉËôëacb‰∏∫ÊúÄÂ§ß‰∏âËßíÂΩ¢ÔºåÈÇ£‰πàÈúÄË¶ÅËÄÉËôëÁöÑÊÉÖÂÜµ‰∏∫ 1cb‰∏çÂàÜÂºÄÁöÑÊÉÖÂÜµ:ËÄÉËôëacb+axy(x,y‰∏∫ÂèØ‰ª•‰∏éaÁªÑÊàê‰∏âËßíÂΩ¢ÁöÑ‰ªªÊÑèÁÇπ) ‰ª•Âèä2cbÂàÜÂºÄ‰∏∫‰∏§‰∏™‰∏âËßíÂΩ¢ÁöÑÊÉÖÂÜµÔºöacd(Ê≠§‰∏∫ÊúâacËæπÁöÑÊúÄÂ§ß‰∏âËßíÂΩ¢Ôºâ+abz(z‰∏∫ÂèØ‰ª•‰∏éabÁªÑÊàê‰∏âËßíÂΩ¢ÁöÑ‰ªªÊÑèÁÇπ)„ÄÇÊï¥ÁêÜ‰∏Ä‰∏ãÂ∞±ÊòØÊ±Çmax(acb+axy,acd+abz)=a+b+c+max(x+y,d+z)ÔºåÂêåÊ†∑Âú∞ÔºåÊàë‰ª¨Â∞Üacd‰Ωú‰∏∫ÊúÄÂ§ß‰∏âËßíÂΩ¢ËÄÉËôëÔºåÊúÄÁªàÊ±ÇÁöÑÊòØa+d+c+max(x+y,b+z)ÔºåÂõ†‰∏∫b=dÔºåÊâÄ‰ª•‰∏§‰∏™ÂºèÂ≠êÊòØÁõ∏ÂêåÁöÑÔºå‰πüÂ∞±ÊòØËØ¥ÂΩìÂ≠òÂú®ÂÖ±Á∫øÁöÑÊúÄÂ§ß‰∏âËßíÂΩ¢Êó∂ÔºåÊàë‰ª¨ËÄÉËôë‰ªªÊÑè‰∏Ä‰∏™ÈÉΩËÉΩÂæóÂà∞Ê≠£Á°ÆÁöÑÁªìÊûú

# ÊØèÊù°Ëæπ‰∏∫‰ªÄ‰πà‰øùÁïô3‰∏™ÊúÄÂ§ß‰∏âËßíÂΩ¢Âë¢ÔºüËÆæÊúÄÂ§ß‰∏âËßíÂΩ¢‰∏∫axbÔºåËæπÂàÜÂà´‰∏∫ ax Âíå bxÔºåÂÅáÂ¶ÇÂá∫Áé∞Ëøô‰πà‰∏ÄÁßçÊÉÖÂÜµ ax:[axb,axc,axd] Âíå bx:[bxa,bxc,bxd] ,Â¶ÇÊûúÂè™‰øùÁïô‰∏§‰∏™ÈÇ£‰πàaxdÊàñbxdÊó†Ê≥ïËÄÉËôëÔºåÊúÄÂ§ßÁöÑ‰∏§‰∏™‰∏âËßíÂΩ¢ÂèòÊàê‰∫ÜaxcÂíåbxc(axb‰∏çÂ±û‰∫éabÂàÜÂºÄÁöÑÊÉÖÂÜµÔºå‰∏∫‰∫ÜÁÆÄ‰æøÂ∞±‰∏çËÆ®ËÆ∫ÂÆÉ‰∫Ü)ÔºåÂè™ËÉΩa,b,c,xÂõõ‰∏™ÁÇπÁöÑÂíåÔºåÂ¶ÇÊûúÂ§öËÄÉËôëaxdÊàñbxdÂàôÁªìÊûú‰∏∫a,b,c,d,x‰∫î‰∏™ÁÇπÁöÑÂíå
class Solution:
    def maxWeight(self, edges: List[List[int]], value: List[int]) -> int:
        from sortedcontainers import SortedList
        m = collections.defaultdict(list)  # ÂÇ®Â≠òÊØè‰∏™ÁÇπÊâÄËøû‰∏âËßíÂΩ¢
        maxtri = collections.defaultdict(list)  # ÂÇ®Â≠òÊØè‰∏™ÁÇπÊâÄËøûÊúÄÂ§ß‰∏âËßíÂΩ¢
        me = collections.defaultdict(lambda: SortedList(key=lambda x: -x[3]))  # ÂÇ®Â≠òÊØèÊù°ËæπÊâÄËøûtop3‰∏âËßíÂΩ¢
        g = collections.defaultdict(set)  # Âõæ,ÂÇ®Â≠òÊØè‰∏™ÁÇπÁöÑÈÇªÊé•ÁÇπ
        for i, j in edges:
            i, j = sorted([i, j])
            g[i].add(j)
        n = len(value)

        # def gettop3(i, j, trinfo):
        #     me[i, j].add(trinfo)
        #     me[i, j] = SortedList(me[i, j][:3], key=lambda x: -x[3])

        def cal(t1, t2):
            all_points = set(t1[:3] + t2[:3])
            return sum(value[i] for i in all_points)

        for i in range(n):
            for j in g[i]:
                for k in g[i] & g[j]:
                    trinfo = [i, j, k, sum(value[x] for x in [i, j, k])]
                    for node in [i, j, k]:
                        if not maxtri[node] or trinfo[-1] > maxtri[node][-1]:
                            maxtri[node] = trinfo
                        m[node].append([i, j, k])
                    for e1, e2 in [(i, j), (i, k), (j, k)]:
                        me[e1, e2].add(trinfo)
                        if len(me[e1, e2]) > 3:
                            me[e1, e2].pop()

        res = 0
        for node in range(n):
            if not m[node]:
                continue
            i, j, k, w = maxtri[node]
            res = max(w, res)  # Âè™Êúâ‰∏Ä‰∏™‰∏âËßíÂΩ¢ÁöÑÊÉÖÂÜµ
            for info in m[node]:  # ÊúÄÂ§ß‰∏âËßíÂΩ¢‰Ωú‰∏∫‰∏Ä‰∏™‰∏âËßíÂΩ¢ËÆ®ËÆ∫
                res = max(res, cal([i, j, k], info))
            li = [i, j, k]
            li.remove(node)
            e1, e2 = list(itertools.product([node], li))
            e1, e2 = tuple(sorted(e1)), tuple(sorted(e2))
            for info1 in me[e1]:
                for info2 in me[e2]:
                    res = max(res, cal(info1, info2))
        return res


# Â§çÂÜô

class Solution:
    def maxWeight(self, edges: List[List[int]], value: List[int]) -> int:
        from sortedcontainers import SortedList
        g = collections.defaultdict(set)
        maxnode = collections.defaultdict(list)
        m = collections.defaultdict(list)
        me = collections.defaultdict(lambda: SortedList(key=lambda x: -x[3]))
        for i, j in edges:
            i, j = sorted([i, j])
            g[i].add(j)
        n = len(value)
        for i in range(n):
            for j in g[i]:
                for k in g[i] & g[j]:
                    trinfo = [i, j, k, sum(value[x] for x in [i, j, k])]
                    for node in [i, j, k]:
                        if not maxnode[node] or trinfo[-1] > maxnode[node][-1]:
                            maxnode[node] = trinfo
                        m[node].append([i,j,k])
                    for e1,e2 in [(i,j),(i,k),(j,k)]:
                        me[e1,e2].add(trinfo)
                        if len(me[e1,e2])>3:
                            me[e1,e2].pop()
        res=0
        def cal(info1,info2):
            points=set(info1+info2)
            return sum(value[i] for i in points)
        for node in range(n):
            if not maxnode[node]:
                continue
            i,j,k,w=maxnode[node]
            res=max(res,w)
            for info in m[node]:
                res=max(res,cal([i,j,k],info))
            li=[i,j,k]
            li.remove(node)
            e1,e2=list(itertools.product([node],li))
            e1,e2=tuple(sorted(e1)),tuple(sorted(e2))
            for info1 in me[e1]:
                for info2 in me[e2]:
                    res=max(res,cal(info1[:3],info2[:3]))
        return res

Solution().maxWeight([[2, 9], [4, 9], [0, 6], [0, 1], [3, 5], [1, 2], [5, 9], [2, 5], [6, 9], [7, 8], [0, 7], [1, 4], [6, 8], [8, 9], [1, 9], [6, 7], [1, 6], [2, 4], [0, 8], [4, 5], [1, 3], [0, 9], [0, 5], [3, 6], [1, 7], [4, 7], [5, 8], [0, 4], [0, 2], [3, 9]], [9327, 1424, 8248, 1216, 6629, 5729, 6388, 8371, 6345, 8])
