# -*- coding: utf-8 -*-
import collections
from typing import List


# ‰∫åÁª¥Âπ≥Èù¢‰∏äÊúâ $N$ Êù°Áõ¥Á∫øÔºåÂΩ¢Âºè‰∏∫ `y = kx + b`ÔºåÂÖ∂‰∏≠ `k`„ÄÅ`b`‰∏∫Êï¥Êï∞ ‰∏î `k > 0`„ÄÇÊâÄÊúâÁõ¥Á∫ø‰ª• `[k,b]` ÁöÑÂΩ¢ÂºèÂ≠ò‰∫é‰∫åÁª¥Êï∞
# ÁªÑ `lines` ‰∏≠Ôºå‰∏çÂ≠òÂú®ÈáçÂêàÁöÑ‰∏§Êù°Áõ¥Á∫ø„ÄÇ‰∏§‰∏§Áõ¥Á∫ø‰πãÈó¥ÂèØËÉΩÂ≠òÂú®‰∏Ä‰∏™‰∫§ÁÇπÔºåÊúÄÂ§ö‰ºöÊúâ $C_N^2$ ‰∏™‰∫§ÁÇπ„ÄÇÊàë‰ª¨Áî®‰∏Ä‰∏™Âπ≥Ë°å‰∫éÂùêÊ†áËΩ¥ÁöÑÁü©ÂΩ¢Ë¶ÜÁõñÊâÄÊúâÁöÑ‰∫§ÁÇπÔºåËØ∑ÈóÆËøô
# ‰∏™Áü©ÂΩ¢ÊúÄÂ∞èÈù¢ÁßØÊòØÂ§öÂ∞ë„ÄÇËã•Áõ¥Á∫ø‰πãÈó¥Êó†‰∫§ÁÇπ„ÄÅ‰ªÖÊúâ‰∏Ä‰∏™‰∫§ÁÇπÊàñÊâÄÊúâ‰∫§ÁÇπÂùáÂú®Âêå‰∏ÄÊù°Âπ≥Ë°åÂùêÊ†áËΩ¥ÁöÑÁõ¥Á∫ø‰∏äÔºåÂàôËøîÂõû0„ÄÇ
#
# Ê≥®ÊÑèÔºöËøîÂõûÁªìÊûúÊòØÊµÆÁÇπÊï∞Ôºå‰∏éÊ†áÂáÜÁ≠îÊ°à **ÁªùÂØπËØØÂ∑ÆÊàñÁõ∏ÂØπËØØÂ∑Æ** Âú® 10^-4 ‰ª•ÂÜÖÁöÑÁªìÊûúÈÉΩË¢´ËßÜ‰∏∫Ê≠£Á°ÆÁªìÊûú
#
#
# **Á§∫‰æã 1Ôºö**
# > ËæìÂÖ•Ôºö`lines = [[2,3],[3,0],[4,1]]`
# >
# > ËæìÂá∫Ôºö`48.00000`
# >
# > Ëß£ÈáäÔºö‰∏âÊù°Áõ¥Á∫øÁöÑ‰∏â‰∏™‰∫§ÁÇπ‰∏∫ (3, 9) (1, 5) Âíå (-1, -3)„ÄÇÊúÄÂ∞èË¶ÜÁõñÁü©ÂΩ¢Â∑¶‰∏ãËßí‰∏∫ (-1, -3) Âè≥‰∏äËßí‰∏∫ (3,9)ÔºåÈù¢ÁßØ‰∏∫ 48
#
#
#
# **Á§∫‰æã 2Ôºö**
# > ËæìÂÖ•Ôºö`lines = [[1,1],[2,3]]`
# >
# > ËæìÂá∫Ôºö`0.00000`
# >
# > Ëß£ÈáäÔºö‰ªÖÊúâ‰∏Ä‰∏™‰∫§ÁÇπ (-2Ôºå-1Ôºâ
#
#
# **ÈôêÂà∂Ôºö**
# + `1 <= lines.length <= 10^5 ‰∏î lines[i].length == 2`
# + `1 <= lines[0] <= 10000`
# + `-10000 <= lines[1] <= 10000`
# + `‰∏éÊ†áÂáÜÁ≠îÊ°àÁªùÂØπËØØÂ∑ÆÊàñÁõ∏ÂØπËØØÂ∑ÆÂú® 10^-4 ‰ª•ÂÜÖÁöÑÁªìÊûúÈÉΩË¢´ËßÜ‰∏∫Ê≠£Á°ÆÁªìÊûú` Related Topics Ë¥™ÂøÉ Âá†‰Ωï Êï∞ÁªÑ Êï∞Â≠¶ ÁªÑÂêàÊï∞Â≠¶ ÊéíÂ∫è
#  üëç 11 üëé 0

# https://leetcode-cn.com/problems/zui-xiao-ju-xing-mian-ji/solution/xiang-lin-liang-lie-jue-dui-bu-hui-shu-d-s95z/

class Solution:
    def minRecSize(self, lines: List[List[int]]) -> float:
        from fractions import Fraction
        Xmin, Ymin = float('inf'), float('inf')
        Xmax, Ymax = float('-inf'), float('-inf')
        mxk = collections.defaultdict(list)
        myk = collections.defaultdict(list)
        for k, b in lines:
            mxk[k].append(b)
            if k != 0:
                myk[Fraction(1, k)].append(Fraction(b, k))
            else:
                Ymin = min(b, Ymin)
                Ymax = max(b, Ymax)
        lix, liy = sorted(mxk), sorted(myk)
        for i in range(1, len(lix)):
            kj, ki = lix[i - 1], lix[i]
            bj_max, bj_min = max(mxk[kj]), min(mxk[kj])
            bi_max, bi_min = max(mxk[ki]), min(mxk[ki])
            x1, x2 = -(bi_min - bj_max) / (ki - kj), -(bi_max - bj_min) / (ki - kj)
            Xmax, Xmin = max(x1, x2, Xmax), min(x1, x2, Xmin)
        for i in range(1, len(liy)):
            kj, ki = liy[i - 1], liy[i]
            bj_max, bj_min = max(myk[kj]), min(myk[kj])
            bi_max, bi_min = max(myk[ki]), min(myk[ki])
            y1, y2 = (bi_min - bj_max) / (ki - kj), (bi_max - bj_min) / (ki - kj)
            Ymax, Ymin = max(y1, y2, Ymax), min(y1, y2, Ymin)
        ans=(Ymax-Ymin)*(Xmax-Xmin)
        return ans if ans!=float('inf') else 0
Solution().minRecSize(lines = [[1,1],[2,3]])