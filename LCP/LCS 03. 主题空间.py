# -*- coding: utf-8 -*-
import collections
from typing import List


# „Äå‰ª•Êâ£‰ºöÂèã„ÄçÁ∫ø‰∏ãÊ¥ªÂä®ÊâÄÂú®Âú∫Âú∞Áî±Ëã•Âπ≤‰∏ªÈ¢òÁ©∫Èó¥‰∏éËµ∞ÂªäÁªÑÊàêÔºåÂú∫Âú∞ÁöÑÂú∞ÂõæËÆ∞‰ΩúÁî±‰∏ÄÁª¥Â≠óÁ¨¶‰∏≤ÂûãÊï∞ÁªÑ `grid`ÔºåÂ≠óÁ¨¶‰∏≤‰∏≠‰ªÖÂåÖÂê´ `"0"ÔΩû"5"` Ëøô 6 ‰∏™Â≠óÁ¨¶„ÄÇÂú∞
# Âõæ‰∏äÊØè‰∏Ä‰∏™Â≠óÁ¨¶‰ª£Ë°®Èù¢ÁßØ‰∏∫ 1 ÁöÑÂå∫ÂüüÔºåÂÖ∂‰∏≠ `"0"` Ë°®Á§∫Ëµ∞ÂªäÔºåÂÖ∂‰ªñÂ≠óÁ¨¶Ë°®Á§∫‰∏ªÈ¢òÁ©∫Èó¥„ÄÇÁõ∏Âêå‰∏îËøûÁª≠ÔºàËøûÁª≠Êåá‰∏ä„ÄÅ‰∏ã„ÄÅÂ∑¶„ÄÅÂè≥Âõõ‰∏™ÊñπÂêëËøûÊé•ÔºâÁöÑÂ≠óÁ¨¶ÁªÑÊàêÂêå‰∏Ä‰∏™‰∏ªÈ¢òÁ©∫Èó¥„ÄÇ
#
#
# ÂÅáÂ¶ÇÊï¥‰∏™ `grid` Âå∫ÂüüÁöÑÂ§ñ‰æßÂùá‰∏∫Ëµ∞Âªä„ÄÇËØ∑ÈóÆÔºå‰∏ç‰∏éËµ∞ÂªäÁõ¥Êé•Áõ∏ÈÇªÁöÑ‰∏ªÈ¢òÁ©∫Èó¥ÁöÑÊúÄÂ§ßÈù¢ÁßØÊòØÂ§öÂ∞ëÔºüÂ¶ÇÊûú‰∏çÂ≠òÂú®ËøôÊ†∑ÁöÑÁ©∫Èó¥ËØ∑ËøîÂõû `0`„ÄÇ
#
# **Á§∫‰æã 1:**
# >ËæìÂÖ•Ôºö`grid = ["110","231","221"]`
# >
# >ËæìÂá∫Ôºö`1`
# >
# >Ëß£ÈáäÔºö4 ‰∏™‰∏ªÈ¢òÁ©∫Èó¥‰∏≠ÔºåÂè™Êúâ 1 ‰∏™‰∏ç‰∏éËµ∞ÂªäÁõ∏ÈÇªÔºåÈù¢ÁßØ‰∏∫ 1„ÄÇ
# >![image.png](https://pic.leetcode-cn.com/1613708145-rscctN-image.png)
#
#
# **Á§∫‰æã 2:**
# >ËæìÂÖ•Ôºö`grid = ["11111100000","21243101111","21224101221","11111101111"]`
# >
# >ËæìÂá∫Ôºö`3`
# >
# >Ëß£ÈáäÔºö8 ‰∏™‰∏ªÈ¢òÁ©∫Èó¥‰∏≠ÔºåÊúâ 5 ‰∏™‰∏ç‰∏éËµ∞ÂªäÁõ∏ÈÇªÔºåÈù¢ÁßØÂàÜÂà´‰∏∫ 3„ÄÅ1„ÄÅ1„ÄÅ1„ÄÅ2ÔºåÊúÄÂ§ßÈù¢ÁßØ‰∏∫ 3„ÄÇ
# >![image.png](https://pic.leetcode-cn.com/1613707985-KJyiXJ-image.png)
#
#
# **ÊèêÁ§∫Ôºö**
# - `1 <= grid.length <= 500`
# - `1 <= grid[i].length <= 500`
# - `grid[i][j]` ‰ªÖÂèØËÉΩÊòØ `"0"ÔΩû"5"`
#
#  Related Topics Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Âπ∂Êü•ÈõÜ Êï∞ÁªÑ Áü©Èòµ
#  üëç 4 üëé 0

#Âπ∂Êü•ÈõÜ Â∏¶Êï∞Èáè
class Solution:
    def largestArea(self, grid: List[str]) -> int:
        f = {}
        size = collections.defaultdict(lambda: 1)

        def find(x):
            f.setdefault(x, x)
            if f[x] != x:
                f[x] = find(f[x])
            return f[x]

        def union(x, y):
            a = find(x)
            b = find(y)
            if a != b:
                f[b] = a
                size[a] += size[b]

        R, C = len(grid), len(grid[0])
        m = {}

        def cal(r, c):
            if (r, c) in m:
                return m[r, c]
            return C * r + c

        for r in range(R):
            for c in range(C):
                num = cal(r, c)
                if r == 0 or c == 0 or r == R - 1 or c == C - 1 or grid[r][c] == '0':
                    union(-1, num)
                nr, nc = r - 1, c
                if 0 <= nr < R and 0 <= nc < C and (grid[nr][nc] == grid[r][c] or grid[nr][nc] == '0' or grid[r][c]=='0'):
                    nnum = cal(nr, nc)
                    if find(nnum) == -1:
                        union(nnum, num)
                    else:
                        union(num, nnum)
                nr, nc = r, c - 1
                if 0 <= nr < R and 0 <= nc < C and (grid[nr][nc] == grid[r][c] or grid[nr][nc] == '0' or grid[r][c]=='0'):
                    nnum = cal(nr, nc)
                    if find(nnum) == -1:
                        union(nnum, num)
                    else:
                        union(num, nnum)
        ans = 0
        for x in range(R * C):
            if find(x) != -1:
                ans = max(ans, size[find(x)])
        return ans


Solution().largestArea(["000","010","000"])
