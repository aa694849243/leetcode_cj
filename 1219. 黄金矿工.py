# -*- coding: utf-8 -*-
from typing import List


# ‰Ω†Ë¶ÅÂºÄÂèë‰∏ÄÂ∫ßÈáëÁüøÔºåÂú∞Ë¥®ÂãòÊµãÂ≠¶ÂÆ∂Â∑≤ÁªèÊé¢Êòé‰∫ÜËøôÂ∫ßÈáëÁüø‰∏≠ÁöÑËµÑÊ∫êÂàÜÂ∏ÉÔºåÂπ∂Áî®Â§ßÂ∞è‰∏∫ m * n ÁöÑÁΩëÊ†º grid ËøõË°å‰∫ÜÊ†áÊ≥®„ÄÇÊØè‰∏™ÂçïÂÖÉÊ†º‰∏≠ÁöÑÊï¥Êï∞Â∞±Ë°®Á§∫Ëøô‰∏ÄÂçïÂÖÉÊ†º‰∏≠ÁöÑÈªÑ
# ÈáëÊï∞ÈáèÔºõÂ¶ÇÊûúËØ•ÂçïÂÖÉÊ†ºÊòØÁ©∫ÁöÑÔºåÈÇ£‰πàÂ∞±ÊòØ 0„ÄÇ
#
#  ‰∏∫‰∫Ü‰ΩøÊî∂ÁõäÊúÄÂ§ßÂåñÔºåÁüøÂ∑•ÈúÄË¶ÅÊåâ‰ª•‰∏ãËßÑÂàôÊù•ÂºÄÈááÈªÑÈáëÔºö
#
#
#  ÊØèÂΩìÁüøÂ∑•ËøõÂÖ•‰∏Ä‰∏™ÂçïÂÖÉÔºåÂ∞±‰ºöÊî∂ÈõÜËØ•ÂçïÂÖÉÊ†º‰∏≠ÁöÑÊâÄÊúâÈªÑÈáë„ÄÇ
#  ÁüøÂ∑•ÊØèÊ¨°ÂèØ‰ª•‰ªéÂΩìÂâç‰ΩçÁΩÆÂêë‰∏ä‰∏ãÂ∑¶Âè≥Âõõ‰∏™ÊñπÂêëËµ∞„ÄÇ
#  ÊØè‰∏™ÂçïÂÖÉÊ†ºÂè™ËÉΩË¢´ÂºÄÈááÔºàËøõÂÖ•Ôºâ‰∏ÄÊ¨°„ÄÇ
#  ‰∏çÂæóÂºÄÈááÔºàËøõÂÖ•ÔºâÈªÑÈáëÊï∞ÁõÆ‰∏∫ 0 ÁöÑÂçïÂÖÉÊ†º„ÄÇ
#  ÁüøÂ∑•ÂèØ‰ª•‰ªéÁΩëÊ†º‰∏≠ ‰ªªÊÑè‰∏Ä‰∏™ ÊúâÈªÑÈáëÁöÑÂçïÂÖÉÊ†ºÂá∫ÂèëÊàñËÄÖÊòØÂÅúÊ≠¢„ÄÇ
#
#
#
#
#  Á§∫‰æã 1Ôºö
#
#  ËæìÂÖ•Ôºögrid = [[0,6,0],[5,8,7],[0,9,0]]
# ËæìÂá∫Ôºö24
# Ëß£ÈáäÔºö
# [[0,6,0],
#  [5,8,7],
#  [0,9,0]]
# ‰∏ÄÁßçÊî∂ÈõÜÊúÄÂ§öÈªÑÈáëÁöÑË∑ØÁ∫øÊòØÔºö9 -> 8 -> 7„ÄÇ
#
#
#  Á§∫‰æã 2Ôºö
#
#  ËæìÂÖ•Ôºögrid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
# ËæìÂá∫Ôºö28
# Ëß£ÈáäÔºö
# [[1,0,7],
#  [2,0,6],
#  [3,4,5],
#  [0,3,0],
#  [9,0,20]]
# ‰∏ÄÁßçÊî∂ÈõÜÊúÄÂ§öÈªÑÈáëÁöÑË∑ØÁ∫øÊòØÔºö1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7„ÄÇ
#
#
#
#
#  ÊèêÁ§∫Ôºö
#
#
#  1 <= grid.length, grid[i].length <= 15
#  0 <= grid[i][j] <= 100
#  ÊúÄÂ§ö 25 ‰∏™ÂçïÂÖÉÊ†º‰∏≠ÊúâÈªÑÈáë„ÄÇ
#
#  Related Topics ÂõûÊ∫ØÁÆóÊ≥ï
#  üëç 78 üëé 0


class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        R, C = len(grid), len(grid[0])
        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]

        def dfs(i, j):
            ans = 0
            for di, dj in dirs:
                ni, nj = i + di, j + dj
                a = 0
                if 0 <= ni < R and 0 <= nj < C and grid[ni][nj] != 0:
                    a += grid[ni][nj]
                    flag = grid[ni][nj]
                    grid[ni][nj] = 0
                    a += dfs(ni, nj)
                    ans = max(a, ans)
                    grid[ni][nj] = flag
            return ans

        ans = 0
        for i in range(R):
            for j in range(C):
                a = 0
                if grid[i][j] > 0:
                    a += grid[i][j]
                    flag = grid[i][j]
                    grid[i][j] = 0
                    a += dfs(i, j)
                    grid[i][j] = flag
                    ans = max(a, ans)
        return ans
Solution().getMaximumGold([[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]])